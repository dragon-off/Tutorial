<head><script language="javascript">

function createXMLHttpRequest() {
  try { return new XMLHttpRequest(); } catch(e) {}
  try { return new ActiveXObject('Msxml2.XMLHTTP'); } catch (e) {}
  try { return new ActiveXObject('Microsoft.XMLHTTP'); } catch (e) {}
  throw 'XMLHttpRequest not supported';
}
 
var HTTP_TIMEOUT = 10; // default to 20s
 
// Sends an asynchronous XMLHttpRequest.
// onSuccess:function(req)
//    Function to be fired on completion.
// onFail : function(req)
//    Function to be fired on failure or timeout.  Note the req parameter
//    may be null.
// timeout: milliseconds
//    Request will be aborted if it hasn't completed within the timeout
//    period.  If not specified, default HTTP_TIMEOUT will be used.
//    Pass in -1 for infinite.
function httpRequest(url, onSuccess, onFail, postData, timeout) {

  var req = createXMLHttpRequest();
  var method = postData ? 'POST' : 'GET';
  req.open(method, url, true);
  req.setRequestHeader('User-Agent', 'XMLHTTP/1.0');
  if (postData) {
    req.setRequestHeader('Content-type','application/x-www-form-urlencoded');
  }

  var timer = null;
  if (!timeout) timeout = HTTP_TIMEOUT;
  if (timeout != -1) {
    timer = setTimeout(httpTimeoutClosure(req, onFail), timeout);
  }

  req.onreadystatechange = httpStatusChangeClosure(req, onSuccess, onFail, timer);
    req.send(postData);
}
  
function httpTimeoutClosure(req, onFail) {
  return function() {
   req.onreadystatechange = null;
    try {req.abort()}
   finally {if (onFail) onFail(req)}
  }
}

function httpStatusChangeClosure(req, onSuccess, onFail, timer) {
  return function() {
    if (req.readyState != 4) return;
    if (timer) clearTimeout(timer);
    if (req.status != 200 && req.status != 304) {
      if (onFail) onFail(req);
      return;
    }    
    if (onSuccess) onSuccess(req);
  }
}

function stopColor(el)
{
 for(var i=1;i<=4;i++)
	document.getElementById('td'+i+'_'+el).style.color = "black";

}

function get_ticket(button) {
httpRequest('print.qsp2?button='+button, function(req) {
 for(var i=1;i<=4;i++)
	document.getElementById('td'+i+'_'+button).style.color = "red";
 setTimeout("stopColor('"+button+"')",3000);
 str = document.getElementById('tr_'+button).className;
 str = str.split('_');
 document.getElementById('tr_'+button).className = 'tr_'+str[1];
 document.getElementById('td4_'+button).innerHTML = (document.getElementById('td4_'+button).innerHTML*1)+1; 
 }, function(req) { }, null, 20000);

}
</script>
<style type="text/css">
.mtable {
border: 1px solid #D2D2D2;
}
.tr_0,.tr_1,.tr_0_1,.tr_1_1 {
padding: 2px;
border: 1px solid #D2D2D2;
font-family: Geneva, Arial, Helvetica, sans-serif;
cursor:pointer;
}

.tr_0,.tr_0_1 {
background: #F1F1F1;
}
.tr_1,.tr_1_1 {
background: #ffffff;
}
.tr_0_1,.tr_1_1 {
color: #777;
}
</style>
</head><body>
<center>
<table class="mtable" cellpadding=0 cellspacing=0>
<%
I=1
WHILE(I LE 251)
BEGIN
{IF((I GT 0 AND I LE 10) OR (I GT 20 AND I LE 30) OR (I GT 40 AND I LE 50))}
{BEGIN}

"<tr id='tr_"I"' class='tr_"I%2 IF(BUTTON_QUEUE(I) EQ 0) BEGIN "_1" END "'><td onClick='get_ticket("I");' id='td1_"I"'>"I "</td><td id='td2_"I"' onClick=get_ticket("I")>"BUTTON_LETTER(I)"</td><td id='td3_"I"' onClick=get_ticket("I")>" BUTTON_NAME(I) "</td><td width=20px id='td4_"I"' style='font-size:16pt;'>"BUTTON_QUEUE(I)"</td></tr>"
{END}
I=I+1
END

%>
</table>
</center>
</body>